@page "/"

<PageTitle>BR Calc</PageTitle>
<h1>War Thunder BR Calculator</h1>

<table>

</table>

<table>
    @foreach (var plane in PlaneDictionary)
    {
        <tr>
            <td>
                <input value="@PlaneDictionary[plane.Key]" @onchange="@((ChangeEventArgs e) => {PlaneDictionary[plane.Key] = SanitizeNumber(Convert.ToDecimal(e.Value!)); CalculateBR();})" />
                <button @onclick="()=>RaiseRating(plane.Key, plane.Value)">+</button>
                <button @onclick="()=>LowerRating(plane.Key, plane.Value)">-</button>
                <button @onclick="()=>RemoveSpecifiedPlane(plane.Key)">X</button>
            </td>
        </tr>
    }
    <button @onclick=AddPlane>Add Plane</button>

</table>


<p role="status">Current Battle Rating: @BattleRating</p>
<p role="status">Current RawBattle Rating: @RawBattleRating</p>

@code {
    public static int planeIndex = 0;
    public decimal BattleRating = 0;
    public decimal RawBattleRating = 0;
    public decimal debug = 0.0M;

    public Dictionary<int, decimal> PlaneDictionary = new()
    {
        {planeIndex++ , 3.0M},
        {planeIndex++ , 3.0M},
        {planeIndex++ , 3.0M},
    };

    private void LowerRating(int key, decimal value)
    {
        decimal newValue = SanitizeNumber(value - 0.41M);
        PlaneDictionary[key] = newValue;
        CalculateBR();
    }

    private void RaiseRating(int key, decimal value)
    {
        decimal newValue = SanitizeNumber(value + 0.29M);
        PlaneDictionary[key] = newValue;
        CalculateBR();
    }

    private void AddPlane()
    {
        PlaneDictionary.Add(planeIndex++, 1.0M);
        CalculateBR();
    }

    private void RemoveSpecifiedPlane(int key)
    {
        PlaneDictionary.Remove(key);
        CalculateBR();
    }

    private void CalculateBR()
    {
        Dictionary<int,decimal> tempDictionary = PlaneDictionary.ToDictionary(e => e.Key, e => e.Value);

        int maxKey = tempDictionary.Aggregate((x,y)=>x.Value > y.Value ? x : y).Key;
        decimal maxValue = tempDictionary[maxKey];
        tempDictionary.Remove(maxKey);


        if (tempDictionary.ContainsValue(maxValue))
        {
            BattleRating = maxValue;
            RawBattleRating = maxValue;
            return;   
        }

        decimal sum = 0;
        decimal lowerSum = 0;
        foreach (var plane in tempDictionary)
        {
            lowerSum += plane.Value;
        }
        decimal lowerAverage = lowerSum / tempDictionary.Count;
        sum = lowerAverage + maxValue;

        RawBattleRating = sum / 2;
        if (maxValue - RawBattleRating > 0.4M)
        {
            BattleRating = StepDown(maxValue);
            return;
        }

        BattleRating = SanitizeNumber(RawBattleRating);

    }

    private decimal SanitizeNumber(decimal input)
    {
        if (input < 1.0M) return 1.0M;
        decimal inputFloor = Math.Floor(input);
        decimal inputDecimal = input % inputFloor;
        decimal SanitizedInput;
        if (inputDecimal <= 0M) return inputFloor;
        if (inputDecimal <= 0.3M) { SanitizedInput = inputFloor + 0.3M; return SanitizedInput; }
        if (inputDecimal <= 0.7M) { SanitizedInput = inputFloor + 0.7M; return SanitizedInput; }
        if (inputDecimal <= 1.0M) { SanitizedInput = inputFloor + 1.0M; return SanitizedInput; }

        throw new Exception("Unexpected result");
    }
    private static decimal StepDown(decimal input)
    {
        if (input < 1.0M) return 1M;

        int inputFloor = (int)Math.Floor(input);
        decimal inputDecimal = input % inputFloor;
        decimal SanitizedInput;

        if (inputDecimal >= 1.0M) { SanitizedInput = inputFloor - 0.3M; return SanitizedInput; }
        if (inputDecimal >= 0.7M) { SanitizedInput = inputFloor + 0.3M; return SanitizedInput; }
        if (inputDecimal >= 0.3M) { SanitizedInput = inputFloor; return SanitizedInput; }
        if (inputDecimal >= 0M) return inputFloor - 0.3M;

        throw new Exception("Unexpected result");
    }

}
