@page "/"

<PageTitle>BR Calc</PageTitle>
<h1>War Thunder BR Calculator</h1>

<table>
    @foreach (var plane in PlaneDictionary)
    {
        <tr>
            <td>
                <input value="@PlaneDictionary[plane.Key]" @onchange="@((ChangeEventArgs e) => {PlaneDictionary[plane.Key] = SanitizeNumber(Convert.ToDecimal(e.Value!)); CalculateBR();})" />
                <button @onclick="()=>RaiseRating(plane.Key, plane.Value)">+</button>
                <button @onclick="()=>LowerRating(plane.Key, plane.Value)">-</button>
                <button @onclick="()=>RemoveSpecifiedPlane(plane.Key)">X</button>
            </td>
        </tr>
    }
    <button @onclick=AddPlane>Add Plane</button>

</table>


<p role="status">Current Battle Rating: @BattleRating</p>
<p role="status">Current Raw Battle Rating: @RawBattleRating</p>

@code {
    public static int planeIndex = 0;
    public decimal BattleRating = 0;
    public decimal RawBattleRating = 0;
    public decimal debugNum = 0.0M;
    public decimal debugNum2 = 0.0M;

    public Dictionary<int, decimal> PlaneDictionary = new()
    {
        {planeIndex++ , 3.0M},
        {planeIndex++ , 3.0M},
        {planeIndex++ , 3.0M},
    };

    private void LowerRating(int key, decimal value)
    {
        decimal newValue = SanitizeNumber(value - 0.41M);
        PlaneDictionary[key] = newValue;
        CalculateBR();
    }

    private void RaiseRating(int key, decimal value)
    {
        decimal newValue = SanitizeNumber(value + 0.29M);
        PlaneDictionary[key] = newValue;
        CalculateBR();
    }

    private void AddPlane()
    {
        if (PlaneDictionary.Count >= 10) return;
        PlaneDictionary.Add(planeIndex++, 1.0M);
        CalculateBR();
    }

    private void RemoveSpecifiedPlane(int key)
    {
        PlaneDictionary.Remove(key);
        CalculateBR();
    }

    private void CalculateBR()
    {
        Dictionary<int,decimal> tempDictionary = PlaneDictionary.ToDictionary(e => e.Key, e => e.Value);

        decimal planeA;
        decimal planeB;
        decimal planeC;
        int maxKey;
        bool doubleDipRule = false;


        maxKey = tempDictionary.Aggregate((x,y)=>x.Value > y.Value ? x : y).Key;
        planeA = tempDictionary[maxKey];
        tempDictionary.Remove(maxKey);

        if (tempDictionary.ContainsValue(planeA))
        {
            doubleDipRule = true;
        }

        maxKey = tempDictionary.Aggregate((x,y)=>x.Value > y.Value ? x : y).Key;
        planeB = tempDictionary[maxKey];
        tempDictionary.Remove(maxKey);
        maxKey = tempDictionary.Aggregate((x,y)=>x.Value > y.Value ? x : y).Key;
        planeC = tempDictionary[maxKey];
        tempDictionary.Remove(maxKey);


        if (planeA - planeB > 2M) planeB = planeA - 2.0M;
        if (planeA - planeC > 2M) planeC = planeA - 2.0M;

        decimal planeAFraction = planeA / 2;
        decimal planeBFraction = planeB / 4;
        decimal planeCFraction = planeC / 4;

        RawBattleRating = planeAFraction + planeBFraction + planeCFraction;

        if (doubleDipRule) BattleRating = planeA;
        else if (RawBattleRating < StepDown(planeA)) BattleRating = StepDown(planeA);
        else
        {
            decimal upDelta = planeA - RawBattleRating;
            decimal downDelta = RawBattleRating - StepDown(planeA);

            if (upDelta <= downDelta) BattleRating = planeA;
            else BattleRating = StepDown(planeA);
        }
    }

    private decimal SanitizeNumber(decimal input)
    {
        if (input < 1.0M) return 1.0M;
        decimal inputFloor = Math.Floor(input);
        decimal inputDecimal = input % inputFloor;
        decimal SanitizedInput;
        if (inputDecimal <= 0M) return inputFloor;
        if (inputDecimal <= 0.3M) { SanitizedInput = inputFloor + 0.3M; return SanitizedInput; }
        if (inputDecimal <= 0.7M) { SanitizedInput = inputFloor + 0.7M; return SanitizedInput; }
        if (inputDecimal <= 1.0M) { SanitizedInput = inputFloor + 1.0M; return SanitizedInput; }

        throw new Exception("Unexpected result");
    }
    
     
    private static decimal StepDown(decimal input)
    {
        if (input < 1.0M) return 1M;

        int inputFloor = (int)Math.Floor(input);
        decimal inputDecimal = input % inputFloor;
        decimal SanitizedInput;

        if (inputDecimal >= 1.0M) { SanitizedInput = inputFloor - 0.3M; return SanitizedInput; }
        if (inputDecimal >= 0.7M) { SanitizedInput = inputFloor + 0.3M; return SanitizedInput; }
        if (inputDecimal >= 0.3M) { SanitizedInput = inputFloor; return SanitizedInput; }
        if (inputDecimal >= 0M) return inputFloor - 0.3M;

        throw new Exception("Unexpected result");
    }
    
}
